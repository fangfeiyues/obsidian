
「work」

   1. 贷款超市: - 

   2. 有赞寄件: 顺丰特运项目-开发中、开店礼包补贴支持有赞寄件、5月调账

   3. 上门取件: 定价日常、多订单合并的项目

   4. 快速回款: 两个指标开发日常

   5. 订单贷: -

   6. 周末记事

      1. 平复心情
         a. 果真: 事业编、国企、大型互联网.. all dead，下一步？
         b. 没事: 是不是真去、去了又该怎么办.. 
      2. 
      3. 看书
      3. AI？

--------------------------------【项目】--------------------------------


「1. AI」 (周更) -> 解决一切重复劳动

   06.09｜ MCP + 飞书、MCP架构落地方案


「2. 减肥」(周更)


「3. 投资」(周更)


--------------------------------【记录】---------------------------------
 

「1. one by one」-> 一路飘摇、颠沛流离

   1、增值：架构演变、分布式事务等

      1. 退货包运费：商家运费补贴、C端消费者运费险

         1.1 理赔领域优化
            a) 边界模糊：补贴概念入侵
            b) 不够内聚
               1. 理赔：什么时候给谁赔付多少钱
               2. 保险：通过什么渠道给谁钱

         1.2 离线风控
            a) 出险率(不一定所有订单都会出险投保) 
            b) 赔付率(不一定所有订单都会退款理赔) 
            c) 每日定价
            d) 加工成指标 
            e) 产品配置策略 
            f) 关联具体事件

         1.3 权益配置
            a) 升级版：定价+0.5、赔付到26
            b) 礼包类：定价-0.3

      2. 有赞寄件 & 上门取件

         2.1 分布式事务

            a) 事务策略
               1. 2PC，强一致性、单点故障、不适合长事务
               2. TCC，事务协调者、标准化事务流程（依赖倒置），但也有事务悬挂的一致性问题
               3. Saga，异步消息执行、存在事务中间态脏数据
               4. 本地消息表，本地数据库扫表、重复消息幂等等

            b) 事务一致性
               1. A成功，但B超时，在Cancel后，B又成功 -> 协调组回收消息保证一致性
               2. A成功，B成功，C失败，Cancel A成功，B失败 -> 人工介入

         2.2 组件开放性
            a) 节点开放：倒置依赖
            b) 流程开放：组件可插拔、数据通用化

   2、分销员：分布式一致性、高流量等

      1. 架构演变（记不清了，慎用）

         1.1 归因路径
            a) 归因中心的归因结果如CPS、云分销 
            b) 店铺设置配置 
            c) 订单商品类型过滤 
            d) 客户归属分销员

         1.2 计费模式
            a) 路径依赖：店铺设置 -> 商品佣金类型如比例、固定分红 -> 分销员等级取金额 
            b) 计费模型：因子参数 + 计算模版即可，不依赖任何原数据 或者 是可插拔倒置依赖的

      2. 分布式一致性

         2.1 多版本 -> 可重复读 -> 通用性的链式快照
            a) 链式存储：HBase、Redis、File..
            b) 失败重试策略：3次等（参考Dubbo源码设计）
            c) 负载均衡策略：权重、平均

         2.2 状态机 -> 解决乱序，保证最终的一致性 -> 模型的可复用

      3. 高流量高并发

         3.1 限流：Tesla
            a) 漏斗
            b) 令牌桶

         3.2 隔离： Redis zset滑动窗口(重点实现！) + VIP通道
            a) 删除窗口外数据：zremrageByScore key min max
            b) 统计窗口内数量：zcard
            c) 新请求加入窗口：zadd(key,ms,ms) -> 高并发情况下考虑原子性，用Lua脚本

         3.3 MySQL优化
            a) HotKey：内核层批量提交
            b) 查询优化
               1. 索引：索引覆盖、最左匹配、区分度、字符不匹配 -> 执行计划(type、extra)
               2. 关键词：order by id、left join、limit
               3. 场景类：深翻页 + 延迟加载
               
      4. 资损防控：离线脚本对账如数据统计 + 实时校准平台

   3、技术总结：面前准备 + 三板斧

      1. 面前准备

         1.1 八股套路
            a) 重：分布式，如MySQL、Redis、MQ、Dubbo.. 
            b) 轻：基础，如juc、spring、jvm.. -> 如果这些也问的细，那也真可以忽略了

         1.2 算法套路

            a) 力扣，解题思路
               1. 基础结构，int[]、Deque、PriorityQueue、Stack等
               2. 深度遍历、回溯递归
               3. 滑动窗口(yyds)、前缀和、二分切割
               4. 动态规划(strong)
               5. 想法题，如队列排序、

            b) 场景：多线程、LRU、trie.. -> 看点运气了

         1.3 业务套路：三板斧（分布式一致性、大流量、架构）

         1.4 心态！：相信平时的积累、既来之则安之

      2. 三板斧

         1. 分布式 --> 怎么保证一致性 (CAP理论)

            1.1 分布式锁 + 幂等 + 重试
            1.2 消息乱序：状态机流转 + 版本快照
            1.3 调用超时：TCC、Saga框架 + 补偿 + 离线对账

         2. 高并发 --> 怎么保证可用性

            2.1 限流策略：令牌桶应对突发流量
            2.2 流量隔离：Redis zadd、zrangbyscoremember、zrem
            2.3 存储优化：索引优化、Inventory Hint

         3. 领域架构 --> 怎么保证抽象及扩展

            3.1 战略设计：脑爆达成通用语言进一步理清上下文从而产出模型
               a) 通用语言：对其需求
               b) 上下文：划分边界
               c）领域模型：边界内的实体、能力、属性、调用关系

            3.2 战术设计：理清应用领域，实体间的关系与边界
               a) 应用层：对外管理，如校验、编排等
               b) 领域层：抽象而稳定，
               c) 基础设施层

   4、业务总结 -> 自己负责一条线 PMF

      1. 有赞寄件：增长期
         1.1 渗透率5以下，收入1000+
         1.2 挑战&策略 -> 「系统化低 + 单量少」0-50单夫妻店
           a) 触达
           b）优惠
           c) 阶梯定价

      2. 上门取件：成熟期
         2.1 渗透率40%，毛利率35%
         2.2 挑战&策略 -> 很难再大增长
            a）商家视角：损失体验，要去优化体验
            b) 开放增长

      3. 包运费：成熟期
         3.1 渗透率40%，毛利率25%，赔付率71%

      4. 云分销：敏捷开发（解决方案 -> 一线需求/线上问题 -> 研发 -> 敏捷迭代够快够小）

   5、HRBP
      1. 为什么出来 -> 公司战略的失误+AI冲击、业务增长停滞、个人瓶颈
      2. 职业规划 -> 立足公司、长远发展
      3. 你的优/缺点是什么 -> 善于学习和总结、做事有点心急考虑不够周全
      4. 怎么处理团队分歧 -> 摆明事实，寻求上级帮助

   6、心态：既来之则安之、永远留好后路(有你有赞)

      1. Ant: 老哥的说法是应该还行的 感觉还可以

      2. Self: 最近感觉心浮气躁，书看少了..原来看书真有用

   7、背调，人生最漫长的等待，怎么办


「2. 有赞寄件」


   浙江省   杭州市   北京市   北京市   0  1000000  1000  1610  500   350

   insert into forward_logistics_express_price(express_id, express_name, send_region,receipt_region, min_weight, max_weight, price_type, initial_weight,initial_weight_price,additional_weight,additional_weight_price,extra,created_at,updated_at) values (7,"顺丰特运","浙江省杭州市","北京市北京市",0,1000000,"discount_price",1000,1610,500,350,"{\"productCode\":\"1\"}",now(),now())

   浙江省   杭州市   北京市   北京市   0  1000000  1000  2300  500   500

   insert into forward_logistics_express_price(express_id, express_name, send_region,receipt_region, min_weight, max_weight, price_type, initial_weight,initial_weight_price,additional_weight,additional_weight_price,extra,created_at,updated_at) values (7,"顺丰特运","浙江省杭州市","北京市北京市",0,1000000,"standard_price",1000,2300,500,500,"{\"productCode\":\"1\"}",now(),now())


   invoke com.youzan.pay.yz.fin.aigis.api.service.ForwardLogisticsService.calculateExpressPrice({"expressId":7,"sendProvince":"浙江省","sendCity":"杭州市","receiptProvince":"北京市","receiptCity":"北京市","weight":1000,"productCode":"1","kdtId":1984620})

   invoke com.youzan.pay.yz.fin.aigis.api.service.ForwardLogisticsService.batchTrialExpressPrice({"expressIds":[1,7],"sendProvince":"浙江省","sendCity":"杭州市","receiptProvince":"北京市","receiptCity":"北京市","weight":1000,"kdtId":1984620,"expressProductCode":{"7":"qqq"}})


   invoke com.youzan.pay.yz.fin.aigis.api.service.ForwardLogisticsService.queryAvailableProduct({"expressId":7,"sendProvince":"浙江省","sendCity":"杭州市","receiptProvince":"广东省","receiptCity":"广州市","weight":1000,"kdtId":1984620})







