
「work」
   1. 07:00 早起｜
   2. 10:00 工作｜贷超H5页、小程序导流; 含硅率：业务 + AI、职能 + AI（提效）; 全栈
   3. 11:00 算法｜
   4. 16:00 业务｜
   5. 19:00 AI｜
   6. 22:00 阅读｜

   ----

--------------------------------【项目】--------------------------------

「1、贷超H5导流」

   银行卡：com.youzan.pay.gateway.sdk.service.user.MemberBankCardQueryService#queryBindingCardSimpleInfoList
      -> com.youzan.pay.user.api.bankcard.BankCardQueryService.queryBindingCardSimpleInfoList

   零钱余额：com.youzan.pay.gateway.sdk.service.user.UserInfoService#queryBalance
      -> com.youzan.pay.user.api.balance.BalanceService.queryBalance

   E卡：com.youzan.pay.gateway.sdk.service.cardvoucher.ECardInoutService#queryBalance
      -> com.youzan.pay.multiprecard.biz.api.ecard.EcardService#queryEcardInfo


--------------------------------【记录】---------------------------------
 

「1、坚持」
   1. 每天运动锻炼｜45min, 强壮体魄
   2. 每天政经历文｜45min, 广阔视野
   3. 每周产业分析｜180min, 提升认知
   4. 每周投资总报｜120min, 学会赚钱


「2、规划」

   ~ 01.30（27 = 15 + 「8 + 4」）-> 60 + 8
      1. 薪资：18 = 1.5 * 12
      2. 年终：12 = 3 * (2 + 2)
      3. 投资：4 = 4 + 10｜x > 0.15？


   ~ 02.19
   
      1. 给自己一个理由
         a. 走：薪资 + 资源｜压力(面试) + 不确定性(领导、公司)  -> 80%
         b. 留：暂稳 + 轻松｜停滞 + 落后 -> 废了、坑里待久失去前进的勇气

      2. 详尽计划
         a. 基础：算法 + 八股｜
         b. 项目：分销 + 物流 + 金融
         c. AI：理论 + 应用

      3. 目标：7 + 70


「3、RUN」
         
   1、概览 -> 深挖

      a）面聊(5min)：经验的匹配度

      b）经历(10min)：要性
      
         有赞工作近6年时间，多次拿到超预期结果，2024年度绩效top1

            [2023.03 ~  至今] 任职社电-增值团队，负责物流、履约、金融消费等增值产品，连续两年推动业务收入增长50%+
            [2020.08 ~ 2023.03] 任职社电-分销团队，虚线管理云分销团队、并负责TOP级插件分销员的架构优化及稳定性治理
            [2019.06 ~ 2020.08] 任职社电-教育团队，负责有赞教育图文视频直播项目，保障疫情期间教育线上业务的正常化

         ----   
         1. 多次好绩效的原因是什么？
         2. 推动业务大增长中技术作用是什么？
         3. 团队管理经验？
         4. 架构优化及稳定性通用沉淀方案？


      c）项目(35min)：聊场景 -> 够抽象

         1、增值业务

            [背景] 为提升收入和毛利，公司在2023开始聚焦有赞寄件、退货包运费、上门取件、跨境等在内的增值业务
            [需求] 在当前物流能力的基础上探索新的物流增值场景，并在进一步提升履约增值takerate的同时把握好金融风控
            [核心] 
               1.物流增值：通过与物流交易边界的抽象，搭建正逆向寄件的物流商运营与定价能力，并进一步建设开放模型
               2.履约增值：通过服务单、投保、理赔等域建设，解决退货包运费的核心理赔归因问题，并抽象复用保险底层能力
            [结果] 从零开始在复杂的业务需求中逐步构建清晰的增值场景，为业务运营提供有力支持，大幅提升业务渗透率和收入增长

            ---- 
            1. 复杂度突出两点
               1. 领域建设：寄件物流与中台，包运费投保与理赔
               2. 风控能力：包运费风险定价


         2、云分销

            [背景] 随着分销市场玩法的不断成熟，一级分销逐渐难以满足日益复杂的多层级裂变和分佣模式
            [需求] 从0到1搭建包括上下级团队、多层分佣、数据统计、推广奖励等在内的分销系统
            [核心] 1. 基于分布式与状态机模型，通过逆向流转状态保证订单创建、支付、取消等的最终一致性，解决“不分佣”的问题
                  2. 用多版本快照，构建多版本节点视图，保证其变更前后的可回溯性，解决“佣金该分给谁”的问题
                  3. 借鉴DDD战略思想，构建清晰的上下文边界和内聚的领域模型，确保业务与代码模型一致性，避免大煤球式开发
            [结果] 补齐多级分销的业务场景，并在次年就带来了1500w+收益。并通过良好的架构设计快速支持业务的发展

            ----
            1. 复杂度
               1. 分布式一致性：怎么理解，是不是有点简单
               2. 多版本快照：MySQL解决什么问题，我们怎么解决？
               3. 领域建设：理解 -> 落地 带来什么好处


         3、分销员稳定性

            [背景] 分销员是有赞商城TOP3流量插件，其稳定性重中之重，但经过6年+的发展其系统漏洞不断亟需治理
            [需求] 根解线上的高频资损问题、缓解每周50+线上jira、规避高流量下系统的不稳定性、并合理规划架构演变
            [核心] 1. 高流量治理：分布式限流 + Redis有序集合，来自动隔离窗口期的高流量到vip通道，避免影响正常业务
               2. 性能优化：通过优化SQL索引、Hot Key高频更新、CPU飙升等问题解决机器压力？
               3. 资损防控：治理因分布式导致的最终不一致问题，并建立离线对账、资损监测等防控体系
            [结果] 潜在资损问题修复80%以上、每周线上问题下降30%、线上错误日志及告警下降50%以上，保障业务平稳发展

            ---- 每天+1
            02.26 


   2、8 GU

      「1、高与满的问题」

         「1、SQL慢」
            1、索引（最左匹配、索引覆盖、深度翻页->延迟加载、join、orderby id、filesort ）
            2、锁（for update、）
            3、数据量过大（数据统计表->离线+实时、hotUpdate->RDS Proxy限制并发、缓存击穿->数据下泻 ..）

         「2、MySQL连接满」
            1. 基于缓存，进行热点数据更新（可行，刷脏复杂度要细聊）
            2. 通过异步，将高并发消息削峰填谷（不可，异步后消息量依旧很高）
            3. 拆分数据，分散到不同库、不同表中，减少并发（不可，分库后跨库查询问题）
            4. 合并请求，批量执行的方式降低冲突（可行，）

         「3、MySQL CPU高」
            1. 单行锁并发太高 -- 合并更新

         「4、CPU高」
            1、cpu利用率 = cpu非空闲时间/cpu空闲时间 * 100%｜vmstat 2 2 
                  --  每两秒收集一次信息（包括memory,swap,io,system,cpu..）
            2、top -> top -Hp 1893 -- 查看进程到线程的资源占用情况（包括cpu占用，memory占用）
            3、jstack -l 12345 -- 查看线程堆栈信息 nid 16进制，如 RUNNABLE 具体代码行、deadlock（死锁） wait to lock
            3、arthas: thread -n 3  -- 查看最忙的3个线程

         「5、OOM」

            1. 自动dump文件：-xx:HeapDumpOnOutOfMemoryError 
            2. 手动dump文件：jmap -dump:live,format=b,file=xxxheap.bin <pid>
            3. MAT(Memory Analysic Tool) 内存分析
               1. 死锁
               2. 大对象

         「6、FullGC频繁」

            1. dump & 分析内存情况
            2. 大对象是否存在？
               1. LIST<object>是否频繁添加对象没移除
               2. 分页查询没做好分页，导致一次查询数量过多，如传参没带id等参数导致数据全部搂出来

      「2、不一致的问题」

      「3、JVM」

         1、JIT: just in time
            1.1 缓存热点代码：大概解释了接口调用第一次一般很慢，但几次后就快了起来
            1.2 逃逸分析：分析是哪种逃逸方式（全局逃逸、参数逃逸、不逃逸） --> 进行锁消除、栈上分配等优化
            1.3 方法内联：A内部调用B，直接内联到A，较少调用消耗

         2、内存区域
            2.1 程序计数器：存储正在执行的字节码指令地址，是只读存储器
            2.2 虚拟机栈：存储局部变量，如
            2.3 本地方法栈：存储本地代码Native Method参数和局部变量，一般是C语言
            2.4 堆：存储对象实例，最大一块，有垃圾回收机制
            2.5 方法区：存储已被加载的类信息、常量、静态变量等，实现形式有多种比如堆、永久代、元空间等。
                JDK1.6->1.7：方法区的字符串常量池、静态变量 --> 内存堆空间
                JDK1.7->1.8：被移除，堆外内存存储运行时常量池、代码缓存等元空间数据
            2.6 运行时常量池：存储编译阶段生成信息，如符号引用常量和字面量，是方法区的一部分

         3、CMS vs G1

         4、JVM参数


   3、专题
      
      06.24｜Redis集群怎么分片、怎么保证一致性，虚拟节点怎么用、新增删除节点怎么操作？怎么扩容设计
      06.24｜2PC、3PC、TCC、Saga？系统实际保证分布式一致性方案
      06.24｜分布式锁 -> 超时、重入、抢占、redlock
      06.25｜Dubbo、MQ Filter 负载均衡、高可用（master挂了）、分布式（单个读写压力大）
      06.26｜分布式 -> MQ分布式架构 -> vs redis/mysql -> 分布式一致性（高可用性=主从复制+读写分离，分布式=自动故障转移）
      06.26｜Dubbo 3.0 Tripe协议、Stream
      06.26｜DDD的实践与应用 -> 遇到的问题 -> 过程的挑战 -> 收益:领域划分清晰 (直接效果线上问题减少 + 项目推进节奏加快)
      06.27｜MVCC -> 事务 -> 日志 -> 锁
      06.27｜分布式限流 -> 限流算法 -> Redis zset -> 跳表
      06.27｜MySQL线上排查
      06.30｜PDD：线程、并发、TOP K (PDD,WYY -> 过二 + 三)
      07.01｜秒杀系统全链路设计
      07.01｜并发锁 synchronized vs lock vs redission 比较
      07.01｜redis -> 10亿uv
      07.02｜100T数据在4C8G机器中，如何找出出现频率最高的
      07.02｜CompletableFuture
      07.08｜计费｜结算，结算时间这个概念该谁去吃？（停摆后的重新开始）
      07.09｜分销问题的深度到底在哪？看看最近做的项目 + 行业分销处理 .. 感觉还是领域模型这块
      07.09｜REVIEW ALL 8 GU
      07.17｜Redis在什么情况下数据错乱丢失
      07.17｜MQ在什么情况下消息丢失
      07.17｜MQ的分布式Q&A 5+
      07.24｜MySQL索引、HABSE存储结构等基础
      07.25｜下探业务深度
      07.25｜AI学习计划
      07.29｜PDD、DW、GD all_dead (对所有的项目推翻->重塑)








   项目：开店开店礼包权益支持同城配对账项目发布、支持贷超H5、评估有赞寄件快捷入口（补贴价） + 有赞寄件京东取件时间（共建）

   日常：有赞寄件1月对账处理

   线上：上门取件正则韩文字符支持、菜鸟虚假揽收导致消费者退款失败、顺丰单子上门取件又手动寄回导致状态推进不下去

   AI：产品 + 系统，没有头绪 怎么用为什么用




