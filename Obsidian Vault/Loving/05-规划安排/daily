
「work」

   1. AI含硅率:

   2. 贷超: 数据运营的日常（逾期、还款计划）

   3. 有赞寄件: 3月补扣&退款（可否AI串行流程）

   4. 上门取件: 上门取件增加商家端价值透传项目发布


--------------------------------【项目】--------------------------------


「1、退货包运费」

   1. 风控策略与定价
      1. 风控策略：FREIGHT_ADMITTANCE 黑白名单 
      2. 出险定价：FREIGHT_RISK_PRICE 风险率 -> 定价
         1. fi_service_team_final_outdangered_rate_price (出险等级对应的定价)
         2. outdangered_rate_recent3 近期出险率 = 退货单 / 投保单
         3. outdangered_Rate_7_90_day3
      3. 存在问题？

   2. 基础服务 -> 给谁开通
      1. 实体：服务记录、变更记录、数据统计
      2. 属性：商家、状态、时间、版本号
      3. 能力：开通、关闭、申请

   3. 保单 -> 给谁投保，并收取多少保费
      1. 实体：保单、保单权益记录
      2. 属性：单号、外部单号、保险单号、状态、【保费】
      3. 能力：订立、预投保、投保、出险、补贴成功
      4. 扩展：
         a. 升级版：权益配置固定保费和赔付
         b. 商家版：依赖倒置，组件化

   4. 理赔 -> 给谁赔付多少钱
      1. 子域：理赔、保险 -> 实体：理赔申请单、理赔单、理赔材料、理赔定价、保险核心
      2. 能力：申请理赔、选择理赔、理赔出险
      3. 属性：理赔单、保单、【理赔金】、状态、受益人
      4. 扩展：
         a. 上游保单
         b. 下游保险


「2、one by one」-> 自信、聪明


   1、增值：架构演变、分布式事务等

      1. 退货包运费

         1.1 理赔领域优化
            a) 对外不够解耦：补贴，概念入侵
            b) 对内不够内聚：理赔金，依赖在保险底层

         1.2 离线风控
            出现率 -> 每日定价 -> 加工成指标 -> 产品配置策略 -> 关联具体事件

         1.3 权益配置
            a) 升级版：定价&


      2. 有赞寄件 & 上门取件

         2.1 分布式事务
            a) TCC，如 try网络超时失败 -> cancel -> try继续执行导致的事务悬挂
            b) 2PC，强一致性、单点故障、不适合长事务
            c) Saga，异步消息执行、存在事务中间态脏数据
            d) 本地消息表，本地数据库扫表、重复消息幂等等

         2.2 组件开放性
            a) 节点开放：倒置依赖
            b) 流程开放：组件可插拔、数据通用化


   2、分销员：分布式一致性、高流量等

      1. 架构演变（记不清了，慎用）

         1.1 归因路径：归因中心如CPS、云分销 -> 店铺设置 -> 订单商品类型 -> 客户归属分销员

         1.2 计费模式：
            a) 路径依赖：店铺设置 -> 商品佣金类型如比例、固定分红 -> 分销员等级取金额 
            b) 计费模型：因子参数 + 计算模版即可，不依赖任何原数据 或者 是可插拔倒置依赖的

      2. 分布式一致性

         2.1 多版本 -> 可重复读 -> 通用性的链式快照存储结构，避免HBase的value存储挂机（版本快照&瞬时快照）
            a) 链式存储：HBase、Redis、File..
            b) 失败重试策略：3次等（参考Dubbo源码设计）
            c) 负载均衡策略：权重、平均

         2.2 状态机 -> 解决乱序，保证最终的一致性 -> 模型的可复用

      3. 高流量高并发

         3.1 限流：Tesla
            a) 漏斗
            b) 令牌桶

         3.2 MQ分流： Redis zset滑动窗口（重点实现！） + VIP通道
            a) 删除窗口外数据：zremrageByScore key min max
            b) 统计窗口内数量：zcard
            c) 新请求加入窗口：zadd(key,ms,ms) -> 高并发情况下考虑原子性，用Lua脚本

         3.3 MySQL优化
            a) HotKey：在内核层批量提交
            b) 索引优化
               1. 索引覆盖
               2. 索引失效：最左匹配、区分度不够、函数、
               3. 选错索引：order by id、left join、
               4. limit深翻页：-> 延迟加载
               
      4. 资损防控：离线脚本对账如数据统计 + 实时校准平台


--------------------------------【记录】---------------------------------
 

「1、减肥」

   05.12｜162，重启爬楼，本周目标-5
   05.14｜158，两天晚上没怎么吃，控制住！


「2、关系」

   1. 自我｜不会考虑他人 -> 保护自己、降低期待 ｜ 好像要明说要表达？
   2. 差劲｜什么都不行（懒惰、素质..） -> 提升自己、尽量远离 ｜ 说了也没用督促也没用

   家庭已是如此，事业要有所成！



invoke com.youzan.trade.revdc.api.service.ReverseDeliveryQueryService.queryDeliverMsg({"buyerId":"11023573335","deliveryOrderNo":"RO250515160607393217","kdtId":"108989502","refundId":"202505151513580020200343","showLogisticsTrace":true})


  /**
   * 等待快递员上门取件
   */
  WAIT(0, "等待快递员上门取件"),
  /**
   * 取消上门取件
   */
  CANCEL(1, "取消上门取件"),
  /**
   * 完成上门取件
   */
  FINISH(2, "完成上门取件"),

  /**
   * 前置选择了上门取件，上门取件回调前处于的状态
   */
  APPLYING(3, "上门取件申请中"),

  /**
   * 上门取件失败
   */
  FAILED(4, "上门取件申请失败"),



    INIT("INIT","初始化"),
    DISCARDED("DISCARDED", "已废弃"),
    ORDER_PLACING("ORDER_PLACING", "下单中"),
    WAIT_PICKUP("WAIT_PICKUP", "待揽件"),
    ORDER_MODIFYING("ORDER_MODIFYING", "修改中"),
    ORDER_CANCELLING("ORDER_CANCELLING", "取消中"),
    PICKUP_FINISHED("PICKUP_FINISHED", "已揽件"),
    CANCELLED("CANCELLED", "已取消"),


WAIT(0, "等待快递员上门取件")：WAIT_PICKUP、ORDER_PLACING、ORDER_MODIFYING、ORDER_CANCELLING
CANCEL(1, "取消上门取件")：CANCELLED
FINISH(2, "完成上门取件")：PICKUP_FINISHED
APPLYING(3, "上门取件申请中")：这是用户申请退货时打的标，还没申请上门取件，应该用不到
FAILED(4, "上门取件申请失败")：DISCARDED

业务背景怎么描述好？
架构/模式，讲述的方法论，感觉说的有点乱
难点还要再深入下，无论是技术的还是业务的。技术的就分布式，业务的领域设计
算法这几个月至少每天+1


