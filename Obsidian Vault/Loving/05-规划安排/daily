
「work」

   1. AI含硅率:
      1. AI SQL，通过现有表结构 + 提示词 -> 生成数据查询SQL
      2. AI日志，关键词 + Prompt搜索到相关日志
      3. Jira一键排查Agent
         3.1 LangChain4j ClassificationChain + 文本标签
         3.2 Prompt管理：根据分类加载Apollo配置
         3.3 执行计划：LLM输出，如[{"tool":"xxxQuery","params":"orderNo=E001"}]
         4. MCP 本地服务接入，然后RAG搜索增强匹配知识库
         5. 
      4...

   2. 贷超: 

   3. 有赞寄件: 

   4. 上门取件: 上门取件取件码

   5. 快速回款: “商品列表不包含虚拟商品”指标优化
      1. DP任务新建Hive任务，保存离线结果表
      2. 风控新建指标，关联离线表，并生成离线SQL Temp Script
      3. DP任务新建Temp任务，关联离线结果 和 指标
      4. DP任务新建导出任务，导出结果到HBase


--------------------------------【项目】--------------------------------


「1、one by one」-> 自信、聪明

   1、增值：架构演变、分布式事务等

      1. 退货包运费

         1.1 理赔领域优化
            a) 边界模糊：补贴，概念入侵
            b) 不够内聚：理赔申请行为薄弱、理赔金在保险核心

         1.2 离线风控
            出险率 -> 每日定价 -> 加工成指标 -> 产品配置策略 -> 关联具体事件

         1.3 权益配置
            a) 升级版：定价+0.5、赔付到26
            b) 礼包类：定价-0.3

      2. 有赞寄件 & 上门取件

         2.1 分布式事务

            a) 事务策略
               1. 2PC，强一致性、单点故障、不适合长事务
               2. TCC，事务协调者、标准化事务流程（依赖倒置），但也有事务悬挂的一致性问题
               3. Saga，异步消息执行、存在事务中间态脏数据
               4. 本地消息表，本地数据库扫表、重复消息幂等等

            b) 事务一致性
               1. A成功，但B超时，在Cancel后，B又成功 -> 协调组回收消息保证一致性
               2. A成功，B成功，C失败，Cancel A成功，B失败 -> 人工介入


         2.2 组件开放性
            a) 节点开放：倒置依赖
            b) 流程开放：组件可插拔、数据通用化

   2、分销员：分布式一致性、高流量等

      1. 架构演变（记不清了，慎用）

         1.1 归因路径：归因中心如CPS、云分销 -> 店铺设置 -> 订单商品类型 -> 客户归属分销员

         1.2 计费模式：
            a) 路径依赖：店铺设置 -> 商品佣金类型如比例、固定分红 -> 分销员等级取金额 
            b) 计费模型：因子参数 + 计算模版即可，不依赖任何原数据 或者 是可插拔倒置依赖的

      2. 分布式一致性

         2.1 多版本 -> 可重复读 -> 通用性的链式快照存储结构，避免HBase的value存储挂机（版本快照&瞬时快照）
            a) 链式存储：HBase、Redis、File..
            b) 失败重试策略：3次等（参考Dubbo源码设计）
            c) 负载均衡策略：权重、平均

         2.2 状态机 -> 解决乱序，保证最终的一致性 -> 模型的可复用

      3. 高流量高并发

         3.1 限流：Tesla
            a) 漏斗
            b) 令牌桶

         3.2 MQ分流： Redis zset滑动窗口（重点实现！） + VIP通道
            a) 删除窗口外数据：zremrageByScore key min max
            b) 统计窗口内数量：zcard
            c) 新请求加入窗口：zadd(key,ms,ms) -> 高并发情况下考虑原子性，用Lua脚本

         3.3 MySQL优化
            a) HotKey：在内核层批量提交
            b) 索引优化
               1. 索引覆盖
               2. 索引失效：最左匹配、区分度不够、函数、
               3. 选错索引：order by id、left join、
               4. limit深翻页：-> 延迟加载
               
      4. 资损防控：离线脚本对账如数据统计 + 实时校准平台

   3、三板斧

      1. 分布式 -> 怎么保证一致性 (CAP理论)
         1.1 分布式锁 + 幂等 + 重试
         1.2 消息乱序：状态机流转 + 版本快照
         1.3 调用超时：TCC、Saga框架 + 补偿 + 离线对账

      2. 高并发 -> 怎么保证可用性
         2.1 限流策略：令牌桶
         2.2 流量隔离：Redis zadd
         2.3 存储优化：数据库索引等

      3. 领域架构 -> 怎么保证内聚与扩展、稳定与抽象

         3.1 战略设计：脑爆达成通用语言进一步理清上下文从而产出模型
            a) 通用语言：
            b) 上下文边界：抽象后归属能力、
            c）领域模型：实体、能力、属性、调用关系

         3.2 战术设计：理清应用领域，实体间的关系与边界
            a) 应用层
            b) 领域层：抽象而稳定
            c) 基础设施层


「2、AI」 -> 每天都要看到进步！
   05.19｜ RAG 大致实现
   05.22｜ Tresformer 复习 Again!
   05.23｜ 搭建本地知识库模型（+周末时间）-> Prompt、LangChain4j、RAG


--------------------------------【记录】---------------------------------
 

「1、减肥」
   05.12｜162，重启爬楼，本周目标-5
   05.14｜158，两天晚上没怎么吃，控制住！
   05.16｜158.8 昨晚都没吃，不知怎么还是没减下去..
   05.20｜162，周末两顿，体重暴增!


「2、关系」

   1. 自我｜只考虑自己（自私、冷漠） -> 各自安好
   2. 差劲｜什么都不行（懒惰、素质） -> 做好自己



trade-core tsp-worker-0a37d905-10111089156-51a782ea E20250517173103063500089 -> 山东省

