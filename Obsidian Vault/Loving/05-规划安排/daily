
「work」

   1. AI含硅率（万事开头难，先做）

   2. 贷款超市: 

   3. 有赞寄件: (27号提前扣除对账)

   4. 上门取件: 上门取件取件码项目

   5. 快速回款: “商品列表不包含虚拟商品”指标优化
      1. DP任务新建Hive任务，保存离线结果表
      2. 风控新建指标，关联离线表，并生成离线SQL Temp Script
      3. DP任务新建Temp任务，关联离线结果 和 指标
      4. DP任务新建导出任务，导出结果到HBase


--------------------------------【项目】--------------------------------


「1、AI」 -> 每天在进步（周更）
   05.19｜ RAG 大致实现
   05.22｜ Tresformer 复习 Again!
   05.23｜ 搭建本地知识库模型（+周末时间）-> Prompt, LangChain4j, RAG
   05.24｜ Jira一键排查技术细节
   05.28｜ 组内统计AI能力，着急了着急了


「2、one by one」-> 自信、聪明

   1、增值：架构演变、分布式事务等

      1. 退货包运费：商家运费补贴、C端消费者包运费

         1.1 理赔领域优化
            a) 边界模糊：补贴，概念入侵
            b) 不够内聚：理赔申请行为薄弱、理赔金在保险核心

         1.2 离线风控
            a) 出险率(不一定所有订单都会出险投保) 
            b) 赔付率(不一定所有订单都会退款理赔) 
            c) 每日定价
            d) 加工成指标 
            e) 产品配置策略 
            f) 关联具体事件

         1.3 权益配置
            a) 升级版：定价+0.5、赔付到26
            b) 礼包类：定价-0.3

      2. 有赞寄件 & 上门取件

         2.1 分布式事务

            a) 事务策略
               1. 2PC，强一致性、单点故障、不适合长事务
               2. TCC，事务协调者、标准化事务流程（依赖倒置），但也有事务悬挂的一致性问题
               3. Saga，异步消息执行、存在事务中间态脏数据
               4. 本地消息表，本地数据库扫表、重复消息幂等等

            b) 事务一致性
               1. A成功，但B超时，在Cancel后，B又成功 -> 协调组回收消息保证一致性
               2. A成功，B成功，C失败，Cancel A成功，B失败 -> 人工介入

         2.2 组件开放性
            a) 节点开放：倒置依赖
            b) 流程开放：组件可插拔、数据通用化

   2、分销员：分布式一致性、高流量等

      1. 架构演变（记不清了，慎用）

         1.1 归因路径
            a) 归因中心的归因结果如CPS、云分销 
            b) 店铺设置配置 
            c) 订单商品类型过滤 
            d) 客户归属分销员

         1.2 计费模式：
            a) 路径依赖：店铺设置 -> 商品佣金类型如比例、固定分红 -> 分销员等级取金额 
            b) 计费模型：因子参数 + 计算模版即可，不依赖任何原数据 或者 是可插拔倒置依赖的

      2. 分布式一致性

         2.1 多版本 -> 可重复读 -> 通用性的链式快照
            a) 链式存储：HBase、Redis、File..
            b) 失败重试策略：3次等（参考Dubbo源码设计）
            c) 负载均衡策略：权重、平均

         2.2 状态机 -> 解决乱序，保证最终的一致性 -> 模型的可复用

      3. 高流量高并发

         3.1 限流：Tesla
            a) 漏斗
            b) 令牌桶

         3.2 隔离： Redis zset滑动窗口(重点实现！) + VIP通道
            a) 删除窗口外数据：zremrageByScore key min max
            b) 统计窗口内数量：zcard
            c) 新请求加入窗口：zadd(key,ms,ms) -> 高并发情况下考虑原子性，用Lua脚本

         3.3 MySQL优化
            a) HotKey：内核层批量提交
            b) 查询优化
               1. 索引：索引覆盖、最左匹配、区分度、字符不匹配 -> 执行计划(type、extra)
               2. 关键词：order by id、left join、limit
               3. 场景类：深翻页 + 延迟加载
               
      4. 资损防控：离线脚本对账如数据统计 + 实时校准平台

   3、总结：面前准备 + 三板斧

      1. 面前准备

         1.1 八股套路
            a) 重：分布式，如 MySQL、Redis、MQ、Dubbo.. 
            b) 轻：基础，如 java、spring、jvm.. -> 如果这些也问的细，那也真可以忽略了

         1.2 算法套路

            a) 力扣，解题思路
               1. 基础结构，如 int[]、Deque、PriorityQueue、Stack等
               2. 深度遍历、回溯递归
               3. 滑动窗口、前缀和、二分切割
               4. 动态规划
               5. 想法题，如队列排序、

            b) 场景：多线程、LRU、trie.. -> 看点运气了

         1.3 业务套路：三板斧（分布式、大流量、一致性）

         1.4 心态！：相信平时的积累、既来之则安之

      2. 三板斧

         1. 分布式 --> 怎么保证一致性 (CAP理论)

            1.1 分布式锁 + 幂等 + 重试
            1.2 消息乱序：状态机流转 + 版本快照
            1.3 调用超时：TCC、Saga框架 + 补偿 + 离线对账

         2. 高并发 --> 怎么保证可用性

            2.1 限流策略：令牌桶应对突发流量
            2.2 流量隔离：Redis zadd、zrangbyscoremember、zrem
            2.3 存储优化：索引优化、Inventory Hint

         3. 领域架构 --> 怎么保证抽象及扩展

            3.1 战略设计：脑爆达成通用语言进一步理清上下文从而产出模型
               a) 通用语言：对其需求
               b) 上下文：划分边界
               c）领域模型：边界内的实体、能力、属性、调用关系

            3.2 战术设计：理清应用领域，实体间的关系与边界
               a) 应用层：对外管理，如校验、编排等
               b) 领域层：抽象而稳定，
               c) 基础设施层

   4、HRBP

      1. 为什么看中这个机会
      2. 你的职业规划
      3. 你的优/缺点是什么
      4. 怎么处理团队分歧
      5. 


--------------------------------【记录】---------------------------------
 

「1、减肥」
   05.12｜162，重启爬楼，本周目标-5
   05.14｜158，两天晚上没怎么吃，控制住！
   05.16｜158.8 昨晚都没吃，不知怎么还是没减下去..
   05.20｜162，周末两顿，体重暴增!
   05.25｜163，周末放纵餐，上吐下泻..
   05.26｜162，本周目标-5到157，记得最少到过150..


「2、关系」

   1. 自我｜只考虑自己（自私、冷漠） -> 各自安好
   2. 差劲｜什么都不行（懒惰、素质） -> 做好自己
   3. 贫穷｜贫困夫妻百事哀 -> 赚钱、赚钱


「3、GO」

   1. 工作内容 
      1. 你可以参与到活动、经规、商城等核心平台的规划和建设，有机会参与到即时配送行业的突破性项目。  
      2. 你负责的领域中有很多业务、技术大牛，你既可以在技术方案的产出中找到技术的成就感，又可以从大牛们身上学习到很多行业经验。  
      3. 这里有复杂的骑手流量场景也有复杂的业务运营场景，你可以通过技术手段不断提升业务效能，实现业务技术双赢。 

   2. 任职要求
      4. 3年及以上工作经验，扎实的计算机理论基础，技术风险意识强；  
      5. 有营销活动、经营规划、库存和预算系统设计经验优先；有C端流量、玩法或者B端大促运营系统设计经验优先；  
      6. 具备较强的学习能力，对技术有热情，有良好的沟通表达能力；  
      7. 有过高可用、高并发分布式系统的架构设计和优化经验，具备技术广度和深度；  
      8. 深度参与过互联网业务系统的架构设计，深入理解领域驱动设计，微服务架构；  
      9. 深入了解JAVA技术及分布式缓存、消息队列等开源框架，系统排障经验丰富，可以快速排查定位问题； 
      10. 精通 MySQL 等数据库原理和常用性能优化技术，以及 NoSQL 的原理、使用场景以及限制；  
      11. 具备良好的业务感觉，能够站在业务、产品的角度深入发掘内在逻辑，进行合理的抽象与建模，做出合适的架构设计

   3. 信息提取
      1.  营销、大促、玩法
      2.  领域驱动、合理抽象&建模
      3.  消息队列、RPC框架
      4.  MySQL、NoSQL（Redis、ES）


一路飘摇、颠沛流离..


29-30-31-1
24 * 3 = 72

invoke com.youzan.trade.revdc.api.service.ReverseDeliveryTaskService.waitPickupOrderFix(400,15,2)